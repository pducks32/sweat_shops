{
  "name": "multimeter-stack",
  "version": "0.2.0",
  "description": "render multiple progress bars (and stacks) at once on the terminal",
  "main": "index.js",
  "directories": {
    "lib": ".",
    "example": "example",
    "test": "test"
  },
  "dependencies": {
    "charm": "~0.1.1"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/indexzero/node-multimeter.git#multimeter-stack"
  },
  "keywords": [
    "progress",
    "bar",
    "status",
    "meter",
    "terminal",
    "console",
    "ansi"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT/X11",
  "engine": {
    "node": ">=0.4"
  },
  "readme": "multimeter\n==========\n\nControl multiple ANSI progress bars on the terminal.\n\n![multibar example output](http://substack.net/images/screenshots/multibar.png)\n\n![multimeter](http://substack.net/images/multimeter.png)\n\nexample\n=======\n\n````javascript\nvar multimeter = require('multimeter');\nvar multi = multimeter(process);\n\nmulti.drop(function (bar) {\n    var iv = setInterval(function () {\n        var p = bar.percent();\n        bar.percent(p + 1);\n        \n        if (p >= 100) clearInterval(iv);\n    }, 25);\n});\n````\n\nmethods\n=======\n\nvar multimeter = require('multimeter');\n\nvar multi = multimeter(stream, ...)\n-----------------------------------\n\nCreate a new multimeter handle on the supplied stream/process objects, which\nwill be passed directly to [charm](https://github.com/substack/node-charm).\n\nIf you pass in a charm object that will be used instead of creating a new one.\n\nvar bar = multi(x, y, params)\n-----------------------------\n\nCreate a new progress bar at `(x,y)` with `params` which default to:\n\n* width : 10\n* before : '['\n* after : '] '\n* solid : { background : 'blue', foreground : 'white', text : '|' }\n* empty : { background : null, foreground : null, text : ' ' }\n\nIf `y` is negative or `'-0'` it will be treated as a relative coordinate.\n\nvar stack = multi(x, y, { type: 'stack', ... })\n-----------------------------\n\nAccepts all parameters as a `bar` but returns a stack for pushing and popping text and bars:\n\n``` js\nvar stack = multi(0, 1, {\n  pad: true,\n  type: 'stack',\n  width : 20,\n  solid : {\n      text : '|',\n      foreground : 'white',\n      background : 'blue'\n  },\n  empty : { text : ' ' },\n});\n\nvar dl1 = stack.push('download1', 'bar');\nstack.push('Another download starting...');\nvar dl2 = stack.push('download2', 'bar');\ndl2.percent(10);\n// ...\ndl2.percent(100);\nstack.push('download2 is finished');\nstack.splice('download2');\n```\n\n* pad: false,\n* width : 10\n* before : '['\n* after : '] '\n* solid : { background : 'blue', foreground : 'white', text : '|' }\n* empty : { background : null, foreground : null, text : ' ' }\n\nvar bar = multi.rel(x, y, params)\n---------------------------------\n\nCreate a new progress bar at an absolute `x` and relative `y` coordinate with\nrespect to the present `multi.offset`.\n\nmulti.drop(params, cb)\n----------------------\n\nCreate a new progress bar at the present cursor location. The `bar` object will\nbe passed to `cb(bar)` once the cursor location has been determined. \n\nmulti.on(...), multi.removeListener(...), multi.destroy(...), multi.write(...)\n------------------------------------------------------------------------------\n\nCall event emitter functions on the underlying `charm` object.\n\nmulti.offset\n------------\n\nThis getter/setter controls the positioning for relative progress bars.\n\nIncrement this value whenever you write a newline to the stream to prevent the\npending progress bars from drifting down from their original positions.\n\nbar.percent(p, msg=p + ' %')\n----------------------------\n\nUpdate the progress bar to `p` percent, a value between 0 and 100, inclusive.\n\nThe text to the right of the progress bar will be set to `msg`.\n\nbar.ratio(n, d, msg=n + ' / ' + d)\n----------------------------------\n\nUpdate the progress bar with a ratio, `n/d`.\n\nThe text to the right of the progress bar will be set to `msg`.\n\nstack.push(text, params)\n----------------------------\n\nPushes the specified `text` onto the stack. If `params` is set will attempt to create a new `Bar` instance using the stack defaults if necessary. The text to the left of the progress bar will be set to `text`.\n\nstack.splice(text)\n----------------------------\n\nRemoves the line in the stack for the specified `text`\n\n\nattributes\n==========\n\nmulti.charm\n-----------\n\nThe [charm](https://github.com/substack/node-charm) object used internally to\ndraw the progress bars.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n    npm install multimeter\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/indexzero/node-multimeter.git#multimeter-stack/issues"
  },
  "homepage": "https://github.com/indexzero/node-multimeter.git#multimeter-stack",
  "_id": "multimeter-stack@0.2.0",
  "dist": {
    "shasum": "d6961cb12e6c91cff0a110d756cc230773d21d2b"
  },
  "_from": "multimeter-stack@",
  "_resolved": "https://registry.npmjs.org/multimeter-stack/-/multimeter-stack-0.2.0.tgz"
}
